{{ $nodeCount := .Values.replicas | int }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "minio.fullname" . }}
  labels:
    app: {{ template "minio.name" . }}
    chart: {{ template "minio.chart" . }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "minio.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "minio.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ template "minio.fullname" . }}
      labels:
        app: {{ template "minio.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ 
          "/bin/sh", 
          "-ce", 
          "cp /tmp/config.json {{ .Values.configPath }} &&
          /usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} server
          http://{{ template `minio.fullname` $ }}-{0...9}.{{ template `minio.fullname` $ }}.{{ $.Release.Namespace }}.svc.cluster.local/minio-sd{0...1}" ]
          volumeMounts:
            - name: minio-0
              mountPath: "/minio-0"
            - name: minio-1
              mountPath: "/minio-1"
            - name: minio-server-config
              mountPath: "/tmp/config.json"
              subPath: config.json
            - name: minio-config-dir
              mountPath: {{ .Values.configPath }}
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "minio.fullname" . }}
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "minio.fullname" . }}
                  key: secretkey
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: service
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: minio-0
          hostPath:
            path: "/minio-0"
            type: Directory
        - name: minio-1
          hostPath:
            path: "/minio-1"
            type: Directory
        - name: minio-user
          secret:
            secretName: {{ template "minio.fullname" . }}
        - name: minio-server-config
          configMap:
            name: {{ template "minio.fullname" . }}
        - name: minio-config-dir
          emptyDir: {}
  